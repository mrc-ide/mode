{{name}} <- R6::R6Class(
  "mode",
  cloneable = FALSE,

  private = list(
    pars_ = NULL,
    pars_multi_ = NULL,
    index_ = NULL,
    info_ = NULL,
    n_threads_ = NULL,
    n_particles_ = NULL,
    n_particles_each_ = NULL,
    shape_ = NULL,
    gpu_config_ = NULL,
    ode_control_ = NULL,
    ptr_ = NULL,
    methods_ = NULL,
    param_ = {{param}},
    reload_ = {{reload}}
  ),

  public = list(
    initialize = function(pars, time, n_particles, n_threads = 1L,
                          seed = NULL, pars_multi = FALSE,
                          deterministic = FALSE, gpu_config = NULL,
                          ode_control = NULL) {
      if (is.null(gpu_config)) {
        private$methods_ <- {{methods_cpu}}
      } else {
        private$methods_ <- {{methods_gpu}}
      }
      res <- private$methods_$alloc(pars, pars_multi, time, n_particles,
                        n_threads, seed, deterministic, gpu_config, ode_control)
      private$pars_ <- pars
      private$pars_multi_ <- pars_multi
      private$n_threads_ <- n_threads
      private$ptr_ <- res[[1L]]
      private$info_ <- res[[2L]]
      private$shape_ <- res[[3L]]
      private$gpu_config_ <- res[[4L]]
      private$ode_control_ <- res[[5L]]
      private$n_particles_ <- prod(private$shape_)
      if (pars_multi) {
        private$n_particles_each_ <- private$n_particles_ / length(pars)
      } else {
        private$n_particles_each_ <- private$n_particles_
      }
    },

    name = function() {
      "{{name}}"
    },

    param = function() {
      private$param_
    },

    n_particles = function() {
       private$n_particles_
    },

    n_particles_each = function() {
       private$n_particles_each_
    },

    shape = function() {
      private$shape_
    },

    pars = function() {
      private$pars_
    },

    info = function() {
      private$info_
    },

    rng_state = function(first_only = FALSE, last_only = FALSE) {
      private$methods_$rng_state(private$ptr_, first_only, last_only)
    },

    set_rng_state = function(rng_state) {
      private$methods_$set_rng_state(private$ptr_, rng_state)
      invisible()
    },

    time = function() {
      private$methods_$time(private$ptr_)
    },

    set_index = function(index) {
      private$methods_$set_index(private$ptr_, index)
      private$index_ <- index
      invisible()
    },

    set_stochastic_schedule = function(time) {
      private$methods_$set_stochastic_schedule(private$ptr_, time)
      invisible()
    },

    index = function() {
      private$index_
    },

    ode_control = function() {
      private$ode_control_
    },

    run = function(time_end) {
      m <- private$methods_$run(private$ptr_, time_end)
      rownames(m) <- names(private$index_)
      m
    },

    simulate = function(time_end) {
      m <- private$methods_$simulate(private$ptr_, time_end)
      rownames(m) <- names(private$index_)
      m
    },

    ode_statistics = function() {
      private$methods_$ode_statistics(private$ptr_)
    },

    n_state = function() {
      private$methods_$n_state(private$ptr_)
    },

    n_pars = function() {
      if (private$pars_multi_) length(private$pars_) else 0L
    },

    n_threads = function() {
      private$n_threads_
    },

    set_n_threads = function(n_threads) {
      prev <- private$n_threads_
      private$methods_$set_n_threads(private$ptr_, n_threads)
      private$n_threads_ <- n_threads
      invisible(prev)
    },

    update_state = function(pars = NULL, state = NULL, time = NULL,
                            set_initial_state = NULL, index = NULL,
                            reset_step_size = NULL) {
      info <- private$methods_$update_state(private$ptr_, pars, state, time,
                               set_initial_state, index, reset_step_size)
      if (!is.null(pars)) {
        private$pars_ <- pars
        private$info_ <- info
      }
      invisible()
    },

    reorder = function(index) {
      storage.mode(index) <- "integer"
      private$methods_$reorder(private$ptr_, index)
      invisible()
    },

    state = function(index = NULL) {
      m <- private$methods_$state(private$ptr_, index)
      rownames(m) <- names(index)
      m
    },

    resample = function(weights) {
      invisible(private$methods_$resample(private$ptr_, weights))
    },

    set_data = function(data, shared = FALSE) {
      private$methods_$set_data(private$ptr_, data, shared)
    },

    compare_data = function() {
      private$methods_$compare_data(private$ptr_)
    },

    filter = function(time_end = NULL, save_trajectories = FALSE,
                      time_snapshot = NULL, min_log_likelihood = NULL) {
      private$methods_$filter(private$ptr_, time_end, save_trajectories,
                           time_snapshot, min_log_likelihood)
    },

    has_openmp = function() {
      mode_{{name}}_capabilities()[["openmp"]]
    },

    has_gpu_support = function(fake_gpu = FALSE) {
      if (fake_gpu) {
        {{has_gpu_support}}
      } else {
        mode_{{name}}_capabilities()[["gpu"]]
      }
    },

    has_compare = function() {
      mode_{{name}}_capabilities()[["compare"]]
    },

    real_size = function() {
      mode_{{name}}_capabilities()[["real_size"]]
    },

    rng_algorithm = function() {
      mode_{{name}}_capabilities()[["rng_algorithm"]]
    }
  ))
class({{name}}) <- c("mode_generator", class({{name}}))
