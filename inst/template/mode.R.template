{{name}} <- R6::R6Class(
  "mode",
  cloneable = FALSE,

  private = list(
    pars_ = NULL,
    pars_multi_ = NULL,
    index_ = NULL,
    info_ = NULL,
    n_threads_ = NULL,
    n_particles_ = NULL,
    n_particles_each_ = NULL,
    shape_ = NULL,
    gpu_config_ = NULL,
    ode_control_ = NULL,
    ptr_ = NULL,
    reload_ = {{reload}}
  ),

  public = list(
    initialize = function(pars, time, n_particles, n_threads = 1L,
                          seed = NULL, pars_multi = FALSE,
                          deterministic = FALSE, gpu_config = NULL,
                          ode_control = NULL) {
      res <- mode_{{name}}_alloc(pars, pars_multi, time, n_particles,
                                 n_threads, seed, deterministic,
                                 gpu_config, ode_control)
      private$pars_ <- pars
      private$pars_multi_ <- pars_multi
      private$n_threads_ <- n_threads
      private$ptr_ <- res[[1L]]
      private$info_ <- res[[2L]]
      private$shape_ <- res[[3L]]
      private$gpu_config_ <- res[[4L]]
      private$ode_control_ <- res[[5L]]
      private$n_particles_ <- prod(private$shape_)
      if (pars_multi) {
        private$n_particles_each_ <- private$n_particles_ / length(pars)
      } else {
        private$n_particles_each_ <- private$n_particles_
      }
    },

    name = function() {
      "{{name}}"
    },

    n_particles = function() {
       private$n_particles_
    },

    n_particles_each = function() {
       private$n_particles_each_
    },

    shape = function() {
      private$shape_
    },

    pars = function() {
      private$pars_
    },

    info = function() {
      private$info_
    },

    rng_state = function(first_only = FALSE, last_only = FALSE) {
      mode_{{name}}_rng_state(private$ptr_, first_only, last_only)
    },

    set_rng_state = function(rng_state) {
      mode_{{name}}_set_rng_state(private$ptr_, rng_state)
      invisible()
    },

    time = function() {
      mode_{{name}}_time(private$ptr_)
    },

    set_index = function(index) {
      mode_{{name}}_set_index(private$ptr_, index)
      private$index_ <- index
      invisible()
    },

    set_stochastic_schedule = function(time) {
      mode_{{name}}_set_stochastic_schedule(private$ptr_, time)
      invisible()
    },

    index = function() {
      private$index_
    },

    ode_control = function() {
      private$ode_control_
    },

    run = function(end_time) {
      m <- mode_{{name}}_run(private$ptr_, end_time)
      rownames(m) <- names(private$index_)
      m
    },

    simulate = function(end_time) {
      m <- mode_{{name}}_simulate(private$ptr_, end_time)
      rownames(m) <- names(private$index_)
      m
    },

    ode_statistics = function() {
      mode_{{name}}_stats(private$ptr_)
    },

    n_state = function() {
      mode_{{name}}_n_state(private$ptr_)
    },

    n_pars = function() {
      if (private$pars_multi_) length(private$pars_) else 0L
    },

    n_threads = function() {
      private$n_threads_
    },

    set_n_threads = function(n_threads) {
      prev <- private$n_threads_
      mode_{{name}}_set_n_threads(private$ptr_, n_threads)
      private$n_threads_ <- n_threads
      invisible(prev)
    },

    update_state = function(pars = NULL, state = NULL, time = NULL,
                            set_initial_state = NULL, index = NULL,
                            reset_step_size = NULL) {
      info <- mode_{{name}}_update_state(private$ptr_, pars, state, time,
                               set_initial_state, index, reset_step_size)
      if (!is.null(pars)) {
        private$pars_ <- pars
        private$info_ <- info
      }
      invisible()
    },

    reorder = function(index) {
      storage.mode(index) <- "integer"
      mode_{{name}}_reorder(private$ptr_, index)
      invisible()
    },

    state = function(index = NULL) {
      if (is.null(index)) {
        mode_{{name}}_state_full(private$ptr_)
      } else {
        mode_{{name}}_state(private$ptr_, index)
      }
    },

    has_openmp = function() {
      mode_{{name}}_has_openmp()
    }
  ))
class({{name}}) <- c("mode_generator", class({{name}}))
