{{name}} <- R6::R6Class(
  "mode",
  cloneable = FALSE,

  private = list(
    pars_ = NULL,
    info_ = NULL,
    ptr_ = NULL,
    n_particles_ = NULL,
    index_ = NULL
  ),

  public = list(
    initialize = function(pars, time, n_particles,
                          control = NULL, seed = NULL) {
      res <- mode_{{name}}_alloc(pars, time, n_particles, control, seed)
      private$ptr_ <- res[[1]]
      private$pars_ <- pars
      private$n_particles_ <- n_particles
    },

    name = function() {
      "{{name}}"
    },

    n_particles = function() {
       private$n_particles_
    },

    pars = function() {
      private$pars_
    },

    time = function() {
      mode_{{name}}_time(private$ptr_)
    },

    set_index = function(index) {
      mode_{{name}}_set_index(private$ptr_, index)
      private$index_ <- index
      invisible()
    },

    set_stochastic_schedule = function(time) {
      mode_{{name}}_set_stochastic_schedule(private$ptr_, time)
      invisible()
    },

    index = function() {
      private$index_
    },

    control = function() {
      mode_{{name}}_control(private$ptr_)
    },

    run = function(end_time) {
      m <- mode_{{name}}_run(private$ptr_, end_time)
      rownames(m) <- names(private$index_)
      m
    },

    statistics = function() {
      mode_{{name}}_stats(private$ptr_)
    },

    n_state_run = function() {
      mode_{{name}}_n_state_run(private$ptr_)
    },

    n_state_full = function() {
      mode_{{name}}_n_state_full(private$ptr_)
    },

    update_state = function(pars = NULL, time = NULL,
                            state = NULL, index = NULL,
                            set_initial_state = NULL, reset_step_size = NULL) {
      mode_{{name}}_update_state(private$ptr_, pars, time, state, index,
                                 set_initial_state, reset_step_size)
      private$pars_ <- pars
    },

    reorder = function(index) {
      mode_{{name}}_reorder(private$ptr_, index)
      invisible()
    },

    state = function(index = NULL) {
      if (is.null(index)) {
        mode_{{name}}_state_full(private$ptr_)
      } else {
        mode_{{name}}_state(private$ptr_, index)
      }
    }

  ))
